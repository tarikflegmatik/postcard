/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const locations = pgTable(
  "locations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug").notNull(),
    coords_latitude: numeric("coords_latitude").notNull(),
    coords_longitude: numeric("coords_longitude").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    locations_slug_idx: uniqueIndex("locations_slug_idx").on(columns.slug),
    locations_updated_at_idx: index("locations_updated_at_idx").on(
      columns.updatedAt,
    ),
    locations_created_at_idx: index("locations_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const stamps = pgTable(
  "stamps",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    image: integer("image_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    stamps_image_idx: index("stamps_image_idx").on(columns.image),
    stamps_updated_at_idx: index("stamps_updated_at_idx").on(columns.updatedAt),
    stamps_created_at_idx: index("stamps_created_at_idx").on(columns.createdAt),
  }),
);

export const postcards = pgTable(
  "postcards",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug").notNull(),
    location: integer("location_id")
      .notNull()
      .references(() => locations.id, {
        onDelete: "set null",
      }),
    pageHeader_subtitle: varchar("page_header_subtitle").notNull(),
    pageHeader_title: varchar("page_header_title").notNull(),
    front_mainImage: integer("front_main_image_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    front_frameImage: integer("front_frame_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    front_borderPattern: integer("front_border_pattern_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    back_frameImage: integer("back_frame_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    back_borderPattern: integer("back_border_pattern_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    back_messageText: jsonb("back_message_text").notNull(),
    back_postageStamp: integer("back_postage_stamp_id")
      .notNull()
      .references(() => stamps.id, {
        onDelete: "set null",
      }),
    back_signatureText: jsonb("back_signature_text").notNull(),
    analytics_opens: numeric("analytics_opens").default("0"),
    analytics_shares: numeric("analytics_shares").default("0"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    postcards_slug_idx: uniqueIndex("postcards_slug_idx").on(columns.slug),
    postcards_location_idx: index("postcards_location_idx").on(
      columns.location,
    ),
    postcards_front_front_main_image_idx: index(
      "postcards_front_front_main_image_idx",
    ).on(columns.front_mainImage),
    postcards_front_front_frame_image_idx: index(
      "postcards_front_front_frame_image_idx",
    ).on(columns.front_frameImage),
    postcards_front_front_border_pattern_idx: index(
      "postcards_front_front_border_pattern_idx",
    ).on(columns.front_borderPattern),
    postcards_back_back_frame_image_idx: index(
      "postcards_back_back_frame_image_idx",
    ).on(columns.back_frameImage),
    postcards_back_back_border_pattern_idx: index(
      "postcards_back_back_border_pattern_idx",
    ).on(columns.back_borderPattern),
    postcards_back_back_postage_stamp_idx: index(
      "postcards_back_back_postage_stamp_idx",
    ).on(columns.back_postageStamp),
    postcards_updated_at_idx: index("postcards_updated_at_idx").on(
      columns.updatedAt,
    ),
    postcards_created_at_idx: index("postcards_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const invitations_registrations = pgTable(
  "invitations_registrations",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    fullName: varchar("full_name").notNull(),
    registeredAt: timestamp("registered_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    _orderIdx: index("invitations_registrations_order_idx").on(columns._order),
    _parentIDIdx: index("invitations_registrations_parent_id_idx").on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [invitations.id],
      name: "invitations_registrations_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const invitations = pgTable(
  "invitations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    slug: varchar("slug").notNull(),
    pageHeader_subtitle: varchar("page_header_subtitle").notNull(),
    pageHeader_title: varchar("page_header_title").notNull(),
    pageHeader_backgroundImage: integer(
      "page_header_background_image_id",
    ).references(() => media.id, {
      onDelete: "set null",
    }),
    front_mainImage: integer("front_main_image_id")
      .notNull()
      .references(() => media.id, {
        onDelete: "set null",
      }),
    front_frameImage: integer("front_frame_image_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    front_borderPattern: integer("front_border_pattern_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    back_frameImage: integer("back_frame_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    back_borderPattern: integer("back_border_pattern_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    back_messageText: jsonb("back_message_text").notNull(),
    back_postageStamp: integer("back_postage_stamp_id")
      .notNull()
      .references(() => stamps.id, {
        onDelete: "set null",
      }),
    back_signatureText: jsonb("back_signature_text").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    invitations_slug_idx: uniqueIndex("invitations_slug_idx").on(columns.slug),
    invitations_page_header_page_header_background_image_idx: index(
      "invitations_page_header_page_header_background_image_idx",
    ).on(columns.pageHeader_backgroundImage),
    invitations_front_front_main_image_idx: index(
      "invitations_front_front_main_image_idx",
    ).on(columns.front_mainImage),
    invitations_front_front_frame_image_idx: index(
      "invitations_front_front_frame_image_idx",
    ).on(columns.front_frameImage),
    invitations_front_front_border_pattern_idx: index(
      "invitations_front_front_border_pattern_idx",
    ).on(columns.front_borderPattern),
    invitations_back_back_frame_image_idx: index(
      "invitations_back_back_frame_image_idx",
    ).on(columns.back_frameImage),
    invitations_back_back_border_pattern_idx: index(
      "invitations_back_back_border_pattern_idx",
    ).on(columns.back_borderPattern),
    invitations_back_back_postage_stamp_idx: index(
      "invitations_back_back_postage_stamp_idx",
    ).on(columns.back_postageStamp),
    invitations_updated_at_idx: index("invitations_updated_at_idx").on(
      columns.updatedAt,
    ),
    invitations_created_at_idx: index("invitations_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    locationsID: integer("locations_id"),
    stampsID: integer("stamps_id"),
    postcardsID: integer("postcards_id"),
    invitationsID: integer("invitations_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_locations_id_idx: index(
      "payload_locked_documents_rels_locations_id_idx",
    ).on(columns.locationsID),
    payload_locked_documents_rels_stamps_id_idx: index(
      "payload_locked_documents_rels_stamps_id_idx",
    ).on(columns.stampsID),
    payload_locked_documents_rels_postcards_id_idx: index(
      "payload_locked_documents_rels_postcards_id_idx",
    ).on(columns.postcardsID),
    payload_locked_documents_rels_invitations_id_idx: index(
      "payload_locked_documents_rels_invitations_id_idx",
    ).on(columns.invitationsID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    locationsIdFk: foreignKey({
      columns: [columns["locationsID"]],
      foreignColumns: [locations.id],
      name: "payload_locked_documents_rels_locations_fk",
    }).onDelete("cascade"),
    stampsIdFk: foreignKey({
      columns: [columns["stampsID"]],
      foreignColumns: [stamps.id],
      name: "payload_locked_documents_rels_stamps_fk",
    }).onDelete("cascade"),
    postcardsIdFk: foreignKey({
      columns: [columns["postcardsID"]],
      foreignColumns: [postcards.id],
      name: "payload_locked_documents_rels_postcards_fk",
    }).onDelete("cascade"),
    invitationsIdFk: foreignKey({
      columns: [columns["invitationsID"]],
      foreignColumns: [invitations.id],
      name: "payload_locked_documents_rels_invitations_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_locations = relations(locations, () => ({}));
export const relations_stamps = relations(stamps, ({ one }) => ({
  image: one(media, {
    fields: [stamps.image],
    references: [media.id],
    relationName: "image",
  }),
}));
export const relations_postcards = relations(postcards, ({ one }) => ({
  location: one(locations, {
    fields: [postcards.location],
    references: [locations.id],
    relationName: "location",
  }),
  front_mainImage: one(media, {
    fields: [postcards.front_mainImage],
    references: [media.id],
    relationName: "front_mainImage",
  }),
  front_frameImage: one(media, {
    fields: [postcards.front_frameImage],
    references: [media.id],
    relationName: "front_frameImage",
  }),
  front_borderPattern: one(media, {
    fields: [postcards.front_borderPattern],
    references: [media.id],
    relationName: "front_borderPattern",
  }),
  back_frameImage: one(media, {
    fields: [postcards.back_frameImage],
    references: [media.id],
    relationName: "back_frameImage",
  }),
  back_borderPattern: one(media, {
    fields: [postcards.back_borderPattern],
    references: [media.id],
    relationName: "back_borderPattern",
  }),
  back_postageStamp: one(stamps, {
    fields: [postcards.back_postageStamp],
    references: [stamps.id],
    relationName: "back_postageStamp",
  }),
}));
export const relations_invitations_registrations = relations(
  invitations_registrations,
  ({ one }) => ({
    _parentID: one(invitations, {
      fields: [invitations_registrations._parentID],
      references: [invitations.id],
      relationName: "registrations",
    }),
  }),
);
export const relations_invitations = relations(
  invitations,
  ({ one, many }) => ({
    pageHeader_backgroundImage: one(media, {
      fields: [invitations.pageHeader_backgroundImage],
      references: [media.id],
      relationName: "pageHeader_backgroundImage",
    }),
    front_mainImage: one(media, {
      fields: [invitations.front_mainImage],
      references: [media.id],
      relationName: "front_mainImage",
    }),
    front_frameImage: one(media, {
      fields: [invitations.front_frameImage],
      references: [media.id],
      relationName: "front_frameImage",
    }),
    front_borderPattern: one(media, {
      fields: [invitations.front_borderPattern],
      references: [media.id],
      relationName: "front_borderPattern",
    }),
    back_frameImage: one(media, {
      fields: [invitations.back_frameImage],
      references: [media.id],
      relationName: "back_frameImage",
    }),
    back_borderPattern: one(media, {
      fields: [invitations.back_borderPattern],
      references: [media.id],
      relationName: "back_borderPattern",
    }),
    back_postageStamp: one(stamps, {
      fields: [invitations.back_postageStamp],
      references: [stamps.id],
      relationName: "back_postageStamp",
    }),
    registrations: many(invitations_registrations, {
      relationName: "registrations",
    }),
  }),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    locationsID: one(locations, {
      fields: [payload_locked_documents_rels.locationsID],
      references: [locations.id],
      relationName: "locations",
    }),
    stampsID: one(stamps, {
      fields: [payload_locked_documents_rels.stampsID],
      references: [stamps.id],
      relationName: "stamps",
    }),
    postcardsID: one(postcards, {
      fields: [payload_locked_documents_rels.postcardsID],
      references: [postcards.id],
      relationName: "postcards",
    }),
    invitationsID: one(invitations, {
      fields: [payload_locked_documents_rels.invitationsID],
      references: [invitations.id],
      relationName: "invitations",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  users: typeof users;
  media: typeof media;
  locations: typeof locations;
  stamps: typeof stamps;
  postcards: typeof postcards;
  invitations_registrations: typeof invitations_registrations;
  invitations: typeof invitations;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_locations: typeof relations_locations;
  relations_stamps: typeof relations_stamps;
  relations_postcards: typeof relations_postcards;
  relations_invitations_registrations: typeof relations_invitations_registrations;
  relations_invitations: typeof relations_invitations;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
